<?php

/**
 * s3ValidatedFile represents a validated uploaded file.
 *
 * @package    symfony
 * @subpackage validator
 * @author     Wired Media
 * @version    SVN: $Id: s3ValidatedFile.class.php 30915 2010-09-15 17:10:37Z Kris.Wallsmith $
 */
class s3ValidatedFile extends sfValidatedFile {
  protected
    $acl = AmazonS3::ACL_PRIVATE;

  /**
   * Constructor.
   *
   * @param string $originalName  The original file name
   * @param string $type          The file content type
   * @param string $tempName      The absolute temporary path to the file
   * @param int    $size          The file size (in bytes)
   * @param string $path          The path to save the file (optional).
   * @param string $acl          The AmazonS3 acl (optional).
   */
  public function __construct($originalName, $type, $tempName, $size, $path = null, $acl = AmazonS3::ACL_PRIVATE) {
    parent::__construct($originalName, $type, $tempName, $size, $path);

    $this->acl = $acl;
  }
  /**
   * Saves the uploaded file.
   *
   * This method can throw exceptions if there is a problem when saving the file.
   *
   * If you don't pass a file name, it will be generated by the generateFilename method.
   * This will only work if you have passed a path when initializing this instance.
   *
   * @param  string $file      The file path to save the file
   * @param  int    $fileMode  The octal mode to use for the new file
   * @param  bool   $create    Indicates that we should make the directory before moving the file
   * @param  int    $dirMode   The octal mode to use when creating the directory
   *
   * @return string The filename without the $this->path prefix
   *
   * @throws Exception
   */
  public function save($filename = null, $fileMode = 0666, $create = true, $dirMode = 0777) {
    if (null === $filename) {
      $filename = $this->generateFilename();
    }

    if ($filename[0] != '/' && $filename[0] != '\\' && !(strlen($filename) > 3 && ctype_alpha($filename[0]) && $filename[1] == ':' && ($filename[2] == '\\' || $filename[2] == '/'))) {
      if (null === $this->path) {
        throw new RuntimeException('You must give a "path" when you give a relative file name.');
      }

      $file = $this->path . DIRECTORY_SEPARATOR . $filename;
    } else {
      $file = $filename;
    }

    $response = sfContext::getInstance()->getAWS()->getS3()->createObject($file, array(
      'fileUpload' => $this->getTempName(),
      'contentType' => $this->getType(),
      'acl' => $this->getAcl()
    ));

    if (!$response->isOk()) {
      throw new Exception(sprintf("There was an error uploading %s to Amazon S3:\n\n%s - %s", $this->getOriginalName(), $response->body->Code, $response->body->Message));
    }

    $this->path = sfConfig::get('sf_upload_dir') . DIRECTORY_SEPARATOR . $this->path;

    return parent::save($filename, $fileMode, $create, $dirMode);
  }

  /**
   * Returns the file content type.
   *
   * @return string The content type
   */
  public function getAcl() {
    return $this->acl;
  }

  /**
   * Returns the extension associated with the given content type.
   *
   * @param  string $type     The content type
   * @param  string $default  The default extension to use
   *
   * @return string The extension (with the dot)
   */
  protected function getExtensionFromType($type, $default = '') {
    static $extensions = array(
      'video/mp4' => 'mp4',
      'video/webm' => 'webm'
    );

    return !$type ? $default : (isset($extensions[$type]) ? '.'.$extensions[$type] : parent::getExtensionFromType($type, $default));
  }
}